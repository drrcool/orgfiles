#Title: Emacs Configuration
/#+PROPERTY: header-args :results none :tangle ~/.config/emacs/init.el
#+auto_tangle: t


* About this config
This is my first attempt at a fully-feature emacs configuration. In many ways, I have little idea of what I'm doing. I've used emacs for years without these features, but with the advent of LSP would like to learn more about to make emacs work the best for my workflow as possible. I've learned a lot via DOOM emacs, but now I want to ensure I have a system that caters to my personal need.

* Setup:
I got tired of emacs asking if it was ok to follow a symlink on every boot and the attempts I made to suppress that didn't work. So instead, we tangle directly to =init.el= and save this org file under version control.

* Initial Quick setup
These are the random one-off configurations that help make Emacs better, but didn't fall into a great category.  Things like removing the unneeded ui elements from the screen or suppressing annoying dialogs that you always answer yes to.
**** Remove some of the features of the UI that we don't need (toolbars, menubars, scroll bars, and splash screen)
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.config/emacs/init.el
        ;;-*- lexical-binding: t; -*-
        ;; Don't show the splash screen
        (setq inhibit-startup-message t)
(setq initial-buffer-choice nil)
    ;; Tune garbage collection
    (setq gc-cons-threshold (* 50 1000 1000))

    ;; Turn off some unneeded UI Elements
        (menu-bar-mode -1)
        (tool-bar-mode -1)
        (scroll-bar-mode -1)
        (display-time-mode 1)
#+END_SRC
**** Load custom lisp files
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :results none
  (load (expand-file-name "rc-funcs.el" user-emacs-directory))
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+end_src

#+RESULTS:
**** 
**** Suppress emacs from asking if it should follow symlink files
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
(setq vc-follow-symlinks t)
(setq vc-suppress-confirm t)
#+end_src

**** Turn on line numbers
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.config/emacs/init.el
  ;; Turn on line numbers in every buffer
  (global-display-line-numbers-mode 1)
  ;; With vim bindings, relatives let us use j and k better
  (setq display-line-numbers-type 'relative)
#+END_SRC

**** Disable lockfiles
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
(setq create-lockfiles nil)
#+end_src


**** Small UI Tweaks


#+BEGIN_SRC emacs-lisp :results none :tangle ~/.config/emacs/init.el
  ;; Turn on line highlithting for current line
  (hl-line-mode 1)
  ;; Add some margins
  (set-fringe-mode 10)
#+END_SRC

**** Add escape to kill prompts

#+BEGIN_SRC emacs-lisp :results none :tangle ~/.config/emacs/init.el
  ;; Make escape kill prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC

**** Keys for Mac
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (setq mac-command-modifier       'control
        mac-option-modifier        'meta
        mac-control-modifier       'control
        mac-right-option-modifier     'meta
        mac-right-control-modifier  'control)
#+end_src

#+RESULTS:
: control

* Setup our package manager
** Define where we go for packages

#+BEGIN_SRC emacs-lisp :results none :tangle ~/.config/emacs/init.el
    ;; Configure pacakge manager
    (require 'package)
    (setq package-archives '(("melpa-stable" . "https://stable.melpa.org/packages/")
			     ("org" . "https://orgmode.org/elpa/")
			     ("elpa" . "https://elpa.gnu.org/packages/")
			     ))

 (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

#+END_SRC

#+RESULTS:


** Setup use-package

#+BEGIN_SRC emacs-lisp :results none :tangle ~/.config/emacs/init.el
;;Initalize use-package
(unless (package-installed-p 'use-package)
(package-install 'use-package))

(require 'use-package)
(require 'quelpa-use-package)
(setq use-package-always-ensure t)

#+END_SRC

** Turn on garbage collection
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :results none

#+end_src

* Build the UI we want

** Install a better mode line

#+BEGIN_SRC emacs-lisp :results none :tangle ~/.config/emacs/init.el
    (use-package doom-modeline
      :ensure t
      :init (doom-modeline-mode 1)
      :config
      (setq doom-modeline-hud nil)
      (setq doom-modeline-minor-modes nil)
      (if (facep 'mode-line-active)
          (set-face-attribute 'mode-line-active nil :family "agave Nerd Font" :height 200) ; For 29+
        (set-face-attribute 'mode-line nil :family "agave Nerd Font" :height 200))
      (set-face-attribute 'mode-line-inactive nil :family "agave Nerd Font" :height 200)
  )
  (setq rc-doom-modeline-text-height 200)
  (setq doom-modeline-height 28)
    (use-package all-the-icons
      :ensure t
      :if (display-graphic-p))


#+END_SRC

** Themes:

*** Setup Modus Themes

I like to do this even if I don't plan on the modus themes being my main theme of choice. I often swap themes, and this way they are ready when I want them.
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (use-package modus-themes
  :ensure t
  :init
  (setq modus-themes-hl-line '(intense)
  modus-themes-subtle-line-numbers nil
  modus-themes-region '(no-extend bg-only)
  modus-themes-variable-pitch-ui nil
  modus-themes-fringes 'intense
  modus-themes-diffs nil
  modus-themes-italic-constructs t
  modus-themes-bold-constructs  t
  modus-themes-prompts '( bold intense italic)
  modus-themes-intense-mouseovers t
  modus-themes-paren-match '(bold intense)
  modus-themes-syntax '( yellow-comments)
  modus-themes-links '(neutral-underline background)
  modus-themes-mode-line '(moody borderless accented 4 1)
  modus-themes-headings
   '((1 . (variable-pitch 1.1 rainbow))
                         (2 . (regular))
                         (3 . (regular))
                         (4 . (regular))
                         (t . (rainbow)))
  modus-themes-org-blocks `gray-background
   ))




#+END_SRC

#+RESULTS:
: t
*** doom-themes
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (use-package doom-themes
  :after mixed-pitch
    :ensure t
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-acario-dark t)

    (doom-themes-visual-bell-config)
    (doom-themes-neotree-config)
    (setq doom-themes-treemacs-theme "doom-atom")
    (doom-themes-treemacs-config)
    (doom-themes-org-config))
#+end_src
*** Kaolin Themes
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :results none
    (use-package kaolin-themes
      :ensure t
      :config
      (setq kaolin-themes-modeline-border nil)
  )
#+end_src
*** Ef-themes
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :results none
  (use-package ef-themes
    :ensure t
    :init
    (setq ef-themes-headings
          (quote ((1 . (variable-pitch 1.1))
                  (2 . (regular))
                  (3 . (regular))
                  (4 . (regular))))))
#+end_src

** Setup our fonts

#+BEGIN_SRC emacs-lisp :results none :tangle ~/.config/emacs/init.el
;; Set a font
(set-face-attribute 'default nil :family "PragmataProMonoLiga Nerd Font" :height 250)

;; Proportionally spaced typeface
(set-face-attribute 'variable-pitch nil :family "Fantasque Sans Mono" :height 1.0)

;; Monospaced typeface
(set-face-attribute 'fixed-pitch nil :family "DankMono Nerd Font" :height 1.5)

#+END_SRC

#+RESULTS:

** Update the help docs

#+BEGIN_SRC emacs-lisp :results none :tangle ~/.config/emacs/init.el
(use-package helpful
  :ensure t)
(global-set-key (kbd "C-c C-d") #'helpful-at-point)
(global-set-key (kbd "C-h F") #'helpful-function)
(global-set-key (kbd "C-h C") #'helpful-command)
(setq counsel-describe-function-function #'helpful-callable)
(setq counsel-describe-variable-function #'helpful-variable)

#+END_SRC

** Popper.el - tame popups
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :results none
  (use-package popper
    :ensure t
    :bind (("C-`" . popper-toggle-latest) 
           ("M-`" . popper-cycle)
           ("C-M-`" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "Output\\*$"
            "\\*Warnings\\*"
            help-mode
            compilation-mode))
    (popper-mode +1))

#+end_src


** Key bindings with general
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (use-package general
    :ensure t
    :config
    (general-auto-unbind-keys)
    (general-evil-setup t))



  #+end_src


** Assorted other packages (which need config)
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :results none
    (use-package ace-window :defer t :ensure t)
  ;;  (use-package centered-cursor-mode :ensure t)
  
    (use-package diminish :ensure t)
    (use-package bufler
      :ensure t
      :config
      (setq bufler-filter-buffer-modes nil
            bufler-filter-buffer-name-regexps nil)
      (setf bufler-groups (bufler-defgroups
                           (group
                            ;; All named workspaces
                            (auto-workspace))
                           (group
                            ;; `help-mode' and `info-mode'
                            (group-or "*Help/Info*"
                                      (mode-match "*Help*" (rx bos "help-"))
                                      (mode-match "*Info*" (rx bos "info-"))))
                           (group
                            ;;special buffers (except magit)
                            (group-and "*Special*"
                                       (lambda (buffer)
                                         (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                                              buffer)
                                                     (funcall (mode-match "Dired" (rx bos "dired"))
                                                              buffer)
                                                     (funcall (auto-file) buffer))
                                           "*Special*"))))
                           (group
                            ;;Special Special Buffers
                            (name-match "**Special**"
                                        (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*")))
                           (group
                            ;; All other Magic buffers by directory
                            (mode-match "Magit* (non-status)" (rx bos (or "magit" "forge") "-"))
                            (auto-directory))
                           ;; Remaining by directory then major mode
                           (auto-directory)
                           (auto-mode)))
      :general
      (:keymaps 'bufler-list-mode-map "Q" 'kill-this-buffer))
#+end_src


* Developer Interaction
This class of settings I think of as those that I need in order to work best with the editor.  How can I commicate. Plugins that affect how I communicate via keybindings, mouse, whatever should go here.

** Evil
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.config/emacs/init.el
    (use-package evil
      :ensure t
    :init
    (setq evil-want-fine-under t)
    (setq evil-want-keybinding nil)
    (setq evil-want-Y-yank-to-eol t)
    (setq evil-undo-system 'undo-redo)
    :config

    (evil-set-initial-state 'dashboard-mode 'motion)
    (evil-set-initial-state 'debugger-mode 'motion)
    (evil-set-initial-state 'pdf-view-mode 'motion)
    (evil-set-initial-state 'bufler-list-mode 'emacs)
    (evil-set-initial-state 'inferior-python-mode 'emacs)
    (evil-set-initial-state 'term-mode 'emacs)
    (evil-set-initial-state 'calc-mode 'emacs)

    ;; ----- Keybindings
    ;; I tried using evil-define-key for these. Didn't work.
    (define-key evil-window-map "\C-q" 'evil-delete-buffer) ;; Maps C-w C-q to evil-delete-buffer (The first C-w puts you into evil-window-map)
    (define-key evil-window-map "\C-w" 'kill-this-buffer)
    (define-key evil-motion-state-map "\C-b" 'evil-scroll-up) ;; Makes C-b how C-u is

    ;; ----- Setting cursor colors
    (setq evil-emacs-state-cursor    '("#649bce" box))
    (setq evil-normal-state-cursor   '("#d9a871" box))
    (setq evil-operator-state-cursor '("#ebcb8b" hollow))
    (setq evil-visual-state-cursor   '("#677691" box))
    (setq evil-insert-state-cursor   '("#eb998b" (bar . 2)))
    (setq evil-replace-state-cursor  '("#eb998b" hbar))
    (setq evil-motion-state-cursor   '("#ad8beb" box))
    (evil-mode +1))
  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (setq evil-collection-mode-list '(dired (custom cus-edit) (package-menu package) calc diff-mode))
    (evil-collection-init))
#+END_SRC

#+RESULTS:
: t

** Yas Snippets 
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (use-package yasnippet
   :ensure t
   :config
   (setq yas-snippet-dirs '("~/.doom.d/snippets"))
   (yas-global-mode 1))
#+END_SRC

#+RESULTS:
: t


** Which-key
 #+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el

   (use-package which-key
     :ensure t
     :init (which-key-mode)
     :diminish which-key-mode
     :config
   (setq which-key-idle-delay 0.01))
   #+end_src  

   #+RESULTS:
   : t

** Rainbow delim
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (use-package rainbow-delimiters
   :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))
  #+end_src

  #+RESULTS:
  | rainbow-delimiters-mode |

  #+RESULTS:
  : t

** hydra
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (use-package hydra :ensure t)
  (defhydra hydra-text-scale (:timeout 4)
            "scale text"
            ("j" text-scale-increase "in")
            ("k" text-scale-decrease "out")
            ("f" nil "finished" :exit t))
  #+end_src

  #+RESULTS:

** Quickrun
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :results none
  (use-package quickrun
    :defer t
    :ensure t
    :general
    (general-define-key
     :states 'normal
     :prefix "SPC"
     :keymaps 'quickrun--mode-map
     "cq" '(nill :which-key "quickrun")
     "cqq" '(quit-window :which-key "Quit")
     "cqr" '(quickrun :which-key "Run")
     "cqR" '(quickrun-region :which-key "Run Region")
     "cqa" '(quickrun-with-arg :which-key "Run with [A]rgs")
     "cqm" '(quickrun-autorun-mode :which-key "Toggle autorun mode")
     "cqs" '(quickrun-select :which-key "Select backend")"cq" '(nill :which-key "quickrun")
     "cqq" '(quit-window :which-key "Quit")
     "cqr" '(quickrun :which-key "Run")
     "cqR" '(quickrun-region :which-key "Run Region")
     "cqa" '(quickrun-with-arg :which-key "Run with [A]rgs")
     "cqm" '(quickrun-autorun-mode :which-key "Toggle autorun mode")
     "cqs" '(quickrun-select :which-key "Select backend")
 ))
#+end_src

** Install rainbow mode
This lets us see hex colors
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (use-package rainbow-mode :ensure t)
  (define-globalized-minor-mode global-rainbow-mode rainbow-mode
    (lambda ()
      (when (not (memq major-mode
		       (list 'org-agenda-mode)))
	(rainbow-mode 1))))
  (global-rainbow-mode 1)
#+END_SRC

#+RESULTS:
: t

* TODO Install Missing evil mode plugins
* Org-Mode and Family
** Install org-mode
#+RESULTS:
: rc/org-mode-setup

Above is a function for all the "stuff" we want to do when org-mode starts. We attach that to a hook when org-mode starts. 
#+BEGIN_SRC emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (use-package org
    :ensure t
    :hook (org-mode . rc/prettify-symbols-setup)
    :hook (org-capture-mode . evil-insert-state)
    :diminish org-indent-mode
    :diminish visual-line-mode
    :config

    ;; Visuals
    (setq org-src-fontify-natively t)
    (setq org-highlight-latex-and-related '(native))
    (setq org-startup-folded 'showeverything)
    (setq org-image-actual-width 300)
    (setq org-fonitfy-whole-heading-line t)

    ;; Interaction
    (setq org-cycle-separator-lines 1 )
    (setq org-catch-invisible-edits 'show-and-error)
    (setq org-scr-tab-acts-natively t)

    (setq org-M-RET-may-splitline '((headline) (item . t) (table .t) (default)))
    (setq org-loop-over-headlines-in-active-region nil)

    ;;Opens links to other org file in same frame
    (setq org-link-frame-setup '((file . find-file)))

    (setq org-log-done t
          org-log-into-drawer t)

    ;; Automatically change bullet type when indenting
    (setq org-catch-invisible-edits 'show-and-error)
    (setq org-scr-tab-acts-natively t)
    (setq org-M-RET-may-splitline '((headline) (item . t) (table .t) (default)))
    (setq org-loop-over-headlines-in-active-region nil)

    ;;Opens links to other org file in same frame
    (setq org-link-frame-setup '((file . find-file)))

    (setq org-log-done t
          org-log-into-drawer t)

    ;; Automatically change bullet type when indenting
    (setq org-list-demote-modify-bullet
          '(("+" . "*")("*" . "-")("-" . "+")))

    ;; Automatically save and close the org files i archive to
    (dolist (file '("todo-archive.org_archive"))
      (advice-add 'org-advice-subtree-default :after
                  (lambda () (rc/save-and-close-this-buffer file))))

    (setq org-list-demote-modify-bullet
          '(("+" . "*")("*" . "-")("-" . "+")))

    ;; Automatically save and close the org files i archive to
    (dolist (file '("todo-archive.org_archive"))
      (advice-add 'org-advice-subtree-default :after
                  (lambda () (rc/save-and-close-this-buffer file))))

#+END_SRC

**** Org part 2 -- tags
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :results none
(setq org-tags-column -1)
#+end_src


**** Todos
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :results none
(setq org-todo-keywords '((type
                           "TODO(t)" "WAITING(h)" "INPROG-TODO(i)" "WORK(w)"
                           "STUDY(s)" "SOMEDAY" "READ(r)" "PROJ(p)" "CONTACT(c)"
                           "|" "DONE(d)" "CANCELLED(C)")))

(setq org-todo-keyword-faces
      '(("TODO"  :inherit (region org-todo) :foreground "DarkOrange1"   :weight bold)
        ("WORK"  :inherit (org-todo region) :foreground "DarkOrange1"   :weight bold)
        ("READ"  :inherit (org-todo region) :foreground "MediumPurple3" :weight bold)
        ("PROJ"  :inherit (org-todo region) :foreground "orange3"     :weight bold)
        ("STUDY" :inherit (region org-todo) :foreground "plum3"       :weight bold)
        ("DONE" . "SeaGreen4")))
#+end_src

**** Priorities
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :results none
(setq org-lowest-priority ?F)  ;; Gives us priorities A through F
(setq org-default-priority ?E) ;; If an item has no priority, it is considered [#E].

(setq org-priority-faces
      '((65 . "red2")
        (66 . "Gold1")
        (67 . "Goldenrod2")
        (68 . "PaleTurquoise3")
        (69 . "DarkSlateGray4")
        (70 . "PaleTurquoise4")))
#+end_src

**** Babel
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :results none
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (python . t)
     (shell . t)
     (js . t)
     (lua . t)
     (sql . t)
     ))
  (setq python-shell-completion-native-enable nil)
  (setq org-src-window-setup 'current-window)

   (defun org-babel-execute:typescript (body params)
    (let ((org-babel-js-cmd "npx ts-node < "))
      (org-babel-execute:js body params)))

#+end_src

**** Agenda
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :results none
; custom time stamp format. I don't use this.
(setq org-time-stamp-custom-formats '("<%A, %B %d, %Y" . "<%m/%d/%y %a %I:%M %p>"))

(setq org-agenda-restore-windows-after-quit t)

(setq org-agenda-window-setup 'current-window)

;; Only show upcoming deadlines for the next 5 days. By default it shows
;; 14 days into the future, which seems excessive.
(setq org-deadline-warning-days 5)
;; If something is done, don't show its deadline
(setq org-agenda-skip-deadline-if-done t)
;; If something is done, don't show when it's scheduled for
(setq org-agenda-skip-scheduled-if-done t)
;; If something is scheduled, don't tell me it is due soon
(setq org-agenda-skip-deadline-prewarning-if-scheduled t)

;; use AM-PM and not 24-hour time
(setq org-agenda-timegrid-use-ampm 1)

;; A new day is 3am (I work late into the night)
(setq org-extend-today-until 3)

;; (setq org-agenda-time-grid '((daily today require-timed)
;;                              (1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200)
;;                              "        " "----------------"))

(setq org-agenda-time-grid nil)

(setq org-agenda-span 'day)

;; (setq org-agenda-block-separator ?-)
(setq org-agenda-current-time-string "<----------------- Now")

(setq org-agenda-scheduled-leaders '("Plan | " "Sched.%2dx: ") ; ⇛
      org-agenda-deadline-leaders '("Due: " "Due in %1d d. | " "Due %1d d. ago: "))

(setq org-agenda-prefix-format '((agenda . "  %-6:T %t%s")
                                 (todo . "  ")
                                 (tags . " %i %-12:c")
                                 (search . " %i %-12:c")))

(add-hook 'org-agenda-mode-hook
          #'(lambda () (setq-local line-spacing 4)))
#+end_src

**** Org-capture
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :results none

(setq org-outline-path-complete-in-steps nil) ; Refile in a single go
(setq org-refile-use-outline-path t)          ; Show full paths for refiling

;; By default an org-capture/refile will save a bookmark. This
;; disables that and keeps my bookmark list how I want it.


(setq org-capture-templates
'(
        ("w" "Work Todo Entries")
        ("we" "No Time" entry (file "~/org/work.org")
         "** %^{Type|HW|READ|TODO|PROJ} %^{Todo title} %?" :prepend t :empty-lines-before 0
         :refile-targets (("~/org/work.org" :maxlevel . 2)))

        ("ws" "Scheduled" entry (file "~/org/work.org")
         "** %^{Type|HW|READ|TODO|PROJ} %^{Todo title}\nSCHEDULED: %^t%?" :prepend t :empty-lines-before 0
         :refile-targets (("~/org/work.org" :maxlevel . 2)))

        ("wd" "Deadline" entry (file "~/org/work.org")
         "** %^{Type|HW|READ|TODO|PROJ} %^{Todo title}\nDEADLINE: %^t%?" :prepend t :empty-lines-before 0
         :refile-targets (("~/org/work.org" :maxlevel . 2)))

        ("ww" "Scheduled & deadline" entry (file "~/org/work.org")
         "** %^{Type|HW|READ|TODO|PROJ} %^{Todo title}\nSCHEDULED: %^t DEADLINE: %^t %?" :prepend t :empty-lines-before 0
         :refile-targets (("~/org/work.org" :maxlevel . 2)))

)
))
#+end_src


*** OrgMode keybindings
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
   (general-def
     :states 'normal
     :keymaps 'org-mode-map
     "t" 'org-todo
     "<return>" 'org-open-at-point-global
     "K" 'org-shiftup
     "J" 'org-shiftdown
     "`" 'org-ctrl-c-ctrl-c)
   (general-def
     :states 'insert
     :keymaps 'org-mode-map
     "C-o" 'evil-org-open-above)

   (general-def
     :keymaps 'org-mode-map
     "M-[" 'org-metaleft
     "M-]" 'org-metaright
     "s-r" 'org-refile
     "M-k" 'org-insert-link
     )

   ;; Org src for editing a source block
   (general-def
     :prefix ","
     :states 'normal
     :keymaps 'org-src-mode-map

     "b" '(nill :which-key "org src")
     "bb" 'org-edit-src-exit
     "bc" 'org-edit-src-abort)
#+end_src
*** Org mode comma key setup
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (general-define-key
   :prefix ","
   :states 'motion
   :keymaps '(org-mode-map)
   "" nil
 
   "A" '(org-archive-subtree-default :which-key "org-archive")
   "a" '(org-agenda :which-key "org agenda")
   "6" '(org-sort :which-key "sort")
   "c" '(org-capture :which-key "org-capture")
   "s" '(org-schedule :which-key "schedule")
   "S" '(jib/org-schedule-tomorrow :which-key "schedule tmrw")
   "d" '(org-deadline :which-key "deadline")
   "g" '(counsel-org-goto :which-key "goto heading")
   "t" '(counsel-org-tag :which-key "set tags")
   "p" '(org-set-property :which-key "set property")
   "r" '(jib/org-refile-this-file :which-key "refile in file")
   "e" '(org-export-dispatch :which-key "export org")
   "B" '(org-toggle-narrow-to-subtree :which-key "toggle narrow to subtree")
   "," '(jib/org-set-startup-visibility :which-key "startup visibility")
   "H" '(org-html-convert-region-to-html :which-key "convert region to html")
   "C" '(jib/org-copy-link-to-clipboard :which-key "copy link to clipboard")
   "1" '(org-toggle-link-display :which-key "toggle link display")
   "2" '(org-toggle-inline-images :which-key "toggle images")
   "3" '(jib/org-occur-unchecked-boxes :which-key "occur unchecked boxes")

   "b" '(nil :which-key "babel")
   "bt" '(org-babel-tangle :which-key "org-babel-tangle")
   "bb" '(org-edit-special :which-key "org-edit-special")
   "bc" '(org-edit-src-abort :which-key "org-edit-src-abort")
   "bk" '(org-babel-remove-result-one-or-many :which-key "org-babel-remove-result-one-or-many")


   ;; insert
   "i" '(nil :which-key "insert")


   "il" '(org-insert-link :which-key "org-insert-link")
   "l" '(org-insert-link :which-key "org-insert-link") ;; More convenient access
   "iL" '(counsel-org-link :which-key "counsel-org-link")
   "it" '(jb-hydra-org-table/body :which-key "tables")

   "is" '(nil :which-key "insert stamp")
   "iss" '((lambda () (interactive) (call-interactively (org-time-stamp-inactive))) :which-key "org-time-stamp-inactive")
   "isS" '((lambda () (interactive) (call-interactively (org-time-stamp nil))) :which-key "org-time-stamp")

   ;; clocking
   "c" '(nil :which-key "clocking")
   "ci" '(org-clock-in :which-key "clock in")
   "co" '(org-clock-out :which-key "clock out")
   "cj" '(org-clock-goto :which-key "jump to clock")
   )


  ;; Org-agenda
  (general-define-key
   :prefix ","
   :states 'motion
   :keymaps '(org-agenda-mode-map) ;; Available in org mode, org agenda
   "" nil
   "a" '(org-agenda :which-key "org agenda")
   "c" '(org-capture :which-key "org-capture")
   "s" '(org-agenda-schedule :which-key "schedule")
   "d" '(org-agenda-deadline :which-key "deadline")
   "t" '(org-agenda-set-tags :which-key "set tags")
   ;; clocking
   "c" '(nil :which-key "clocking")
   "ci" '(org-agenda-clock-in :which-key "clock in")
   "co" '(org-agenda-clock-out :which-key "clock out")
   "cj" '(org-clock-goto :which-key "jump to clock")
   )

  (evil-define-key 'motion org-agenda-mode-map
    (kbd "f") 'org-agenda-later
    (kbd "b") 'org-agenda-earlier)
#+end_src

#+RESULTS:
**** Evil org
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :results none
  (fset 'evil-redirect-digit-argument 'ignore) ;; before evil-org loaded
    (use-package evil-org
      :ensure t
      :diminish evil-org-mode
      :after org
      :config
      (add-hook 'org-mode-hook 'evil-org-mode)
      (add-hook 'evil-org-mode-hook'
                (lambda () (evil-org-set-key-theme))))

    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)
#+end_src

** Auto :results none :tangle org files
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (use-package org-auto-tangle
    :ensure t
    :defer t
    :hook (org-mode . org-auto-tangle-mode)
    :config
    (setq org-auto-tangle-default t))
  #+end_src

  #+RESULTS:
  | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | org-auto-tangle-mode | rc/org-mode-setup |

#+end_src

* Languages
** Tree-sitter

#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el

  (use-package tree-sitter
    :ensure t
    :config
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

  (use-package tree-sitter-langs
    :ensure t
    :after tree-sitter)
  #+end_src

  #+RESULTS:

** LSP via EGlOT
This seems like its the paved path, but I'm unsure.
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
(use-package eglot :ensure t)
#+end_src

#+RESULTS:

** LSP via lsp-mode
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    (setq lsp-modeline-code-actions-segments t)
    :config
    (with-eval-after-load 'lsp-mode
      (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)))
#+end_src

#+RESULTS:
: t

** Setting up for Typescript
*** Language server
First we configure the LSP mode =typescript-mode=. This will be replaced by =typescript-ts-mode= but that uses tree-sitter and for some reason I can't get that to compile. We install and enable tree-sitter support. Then we define a new mode =Typescript TSX= mode that is a combination of =typescript-mode= and =typescriptreact-mode= (for tsx files).  We then tell treesitter that both tsx and ts should be treated the same.
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
 #+end_src

 #+RESULTS:
 | (closure (t) nil (tsi-typescript-mode 1)) | lsp-deferred |

*** TSI.el
=tsi.el= provides a tree-sitter powered set of indentation rules for ts, json, and css files
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (use-package tsi
  :ensure t
        :after tree-sitter
        :quelpa (tsi :fetcher github :repo "orzechowskid/tsi.el")
        ;; define autoload definitions which when actually invoked will cause package to be loaded
        :commands (tsi-typescript-mode tsi-json-mode tsi-css-mode)
        :init
        (add-hook 'typescript-mode-hook (lambda () (tsi-typescript-mode 1)))
        (add-hook 'json-mode-hook (lambda () (tsi-json-mode 1)))
        (add-hook 'css-mode-hook (lambda () (tsi-css-mode 1)))
        (add-hook 'scss-mode-hook (lambda () (tsi-scss-mode 1))))
#+end_src

#+RESULTS:
| lambda  | nil | (tsi-scss-mode 1) |                   |
| closure | (t) | nil               | (tsi-scss-mode 1) |

*** Formatting on Save
We use =apheleia= to handle our formatting. This packages can do many different languages so including it here will
benefit others as well.

#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (use-package apheleia
    :ensure t
    :config
    (apheleia-global-mode +1))
 #+end_src

 #+RESULTS:
 : t

** Simple Lua
*** Enable =lua-mode=

#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el :results none 
  (use-package lua-mode
    :ensure t
    :after tree-sitter
    :config
    (add-to-list 'auto-mode-alist '("\\.lua\\'" . lua-mode))
    (add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
  )
#+END_SRC

#+RESULTS:

* Completion
** Install Company Mode
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el :results none 
  (use-package company
    :ensure t
    :after lsp-mode
    :hook (prog-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . compnay-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  #+end_src


** Add LSP UI
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
    (use-package lsp-ui
      :ensure t
      :hook (lsp-mode . lsp-ui-mode)
      :config
  (setq lsp-ui-sideline-enable t)
  (setq lso-ui-sideline-show-hover t)
    (setq lsp-ui-doc-position 'bottom))
#+end_src

#+RESULTS:
| lsp-ui-mode |
** Treemacs
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (use-package treemacs
    :ensure t
    :defer t
    :config
    (setq treemacs-position 'right
          width 50))
#+end_src

#+RESULTS:
: t

*** LSP Treemacs
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (use-package lsp-treemacs
    :ensure t
  :after lsp)
#+end_src

#+RESULTS:

*** Treemacs-evil
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (use-package treemacs-evil
    :ensure t
    :config
    )

#+end_src

#+RESULTS:


*** Treemacs-projectile
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (use-package treemacs-projectile
    :ensure t
    )

#+end_src

#+RESULTS:


*** treemacs-magit
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (use-package treemacs-magit
    :ensure t
    )

#+end_src


*** treemacs-icons-dired

*** treemacs-perspective

*** treemacs-all-the-icons


** Ivy
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el

  (use-package ivy
    :ensure t
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (ivy-mode 1)
  )
  #+end_src

  #+RESULTS:
  : t
** Recent files
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :results none
  (use-package recentf
               :ensure nil
               :config
               (setq recentf-max-saved-items 200)
               (setq recentf-filename-handlers
                     (append '(abbreviate-file-name) recentf-filename-handlers))
  (recentf-mode))
#+end_src

** Faster Symbol searches
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (use-package lsp-ivy
    :ensure t)
#+end_src

#+RESULTS:

** Ivy Rich
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el

  (use-package ivy-rich
    :ensure t
    :init
    (ivy-rich-mode 1)
   :config
   (setq ivy-format-function #'ivy-format-function-line)
   (setq ivy-rich-display-transformers-list
         (plist-put ivy-rich-display-transformers-list
                    'ivy-switch-buffer
                    '(:columns
                      ((ivy-rich-candidate (:width 40))
                       (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
                       (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
                       (ivy-rich-switch-buffer-project (:width 15 :face success))
                       (ivy-rich-switch-buffer-path (:width (lambda(x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
                      :predicate
                      (lambda (cand)
                        (if-let ((buffer (get-buffer cand)))
                            (with-current-buffer buffer
                              (not (derived-mode-p 'exwm-mode)))))))))
  #+end_src

  #+RESULTS:
  : t

* Magit

#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
    (use-package magit
    :ensure t
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  #+end_src

  #+RESULTS:
    
* New uncategorized

** Workspaces with perspective
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (use-package perspective
    :ensure t
    :bind
    ("C-x C-b" . persp-list-buffers)
    :custom
    (persp-mode-prefix-key (kbd "C-c M-p"))
  :init
  (setq persp-initial-frame-name "Main")
  (unless (equal persp-mode t)
    (persp-mode)))
#+end_src

** Auto-revert changed files
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (setq global-auto-revert-non-file-buffers t)
(global-auto-revert-mode 1)
#+end_src

#+RESULTS:
: t

** Tramp
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
(setq tramp-default-method "ssh")
#+end_src

#+RESULTS:
: ssh

* Editing Configuration
** Tab Widths
Default to an indentation size of 2
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
(setq-default tab-width 2)
(setq-default evil-shift-width tab-width)
#+end_src

#+RESULTS:
: 2

** Spaces not tabs
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (setq-default indent-tabs-mode nil)
#+end_src

#+RESULTS:

** Comments:
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (use-package evil-nerd-commenter
    :ensure t
    :bind
    ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

#+RESULTS:
: evilnc-comment-or-uncomment-lines
** Mixed Pitch
A better verson of variable pitch.
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :results none
  (use-package mixed-pitch
    :ensure t
    :defer t
    :config
    (setq mixed-pitch-set-height nil)
    (dolist (face '(org-date org-priority org-tag org-special-keyword))
      (add-to-list 'mixed-pitch-fixed-pitch-faces face))
   )
#+end_src

* More misc
** Parinfer for lispy languages
* Hydra
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :results none
  (defhydra rc-hydra-variable-fonts (:pre (mixed-pitch-mode 0)
                                          :post (mixed-pitch-mode 1))
    ("t" (set-face-attribute 'variable-pitch nil :family "Tinos" :height 160)             "Tinos")
    ("g" (set-face-attribute 'variable-pitch nil :family "EB Garamond" :height 160 :weight 'normal)             "EB Garamond")
    ("n" (set-face-attribute 'variable-pitch nil :family "Nunito" :slant 'normal :weight 'normal :height 160) "Nunito")


  )
#+end_src
** Theme swticher
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :results none
    (defhydra rc-hydra-theme-switcher (:hint nil)
      "
       Dark                ^Light^
  ----------------------------------------------
  _1_ one              _z_ one-light 
  _2_ vivendi          _x_ operandi
  _3_ molokai          _c_ jake-plain
  _4_ snazzy           _v_ flatwhite
  _5_ old-hope         _b_ tomorrow-day
  _6_ henna                ^
  _7_ kaolin-galaxy        ^
  _8_ peacock              ^
  _9_ jake-plain-dark      ^
  _0_ monokai-machine      ^
  _-_ xcode                ^
  _q_ quit                 ^
  ^                        ^
    "
      ;; Dark
      ("1" (load-theme 'doom-one t)             "one")
      ("2" (load-theme 'modus-vivendi t)             "modus-vivendi")
      ("3" (load-theme 'doom-molokai t)             "molokai")
      ("4" (load-theme 'doom-snazzy t )             "snazzy")
      ("5" (load-theme 'doom-old-hope t)             "old hope")
      ("6" (load-theme 'doom-henna t)             "henna")
      ("7" (load-theme 'kaolin-galaxy t)             "jaolin-galaxy")
      ("8" (load-theme 'doom-monokai-machine t)             "monokai-machine")
      ("9" (load-theme 'doom-xcode t)             "xcode")
      ("0" (load-theme 'doom-moonlight t)             "moonlight")
      ("-" (load-theme 'doom-laserwave t)             "laserwave")
      )



#+end_src
** window commands
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :results none
  (defhydra rc-hydra-window (:hint nil)
   "
Movement      ^Split^            ^Switch^        ^Resize^
----------------------------------------------------------------
_M-<left>_  <   _/_ vertical      _b_uffer        _<left>_  <
_M-<right>_ >   _-_ horizontal    _f_ind file     _<down>_  ↓
_M-<up>_    ↑   _m_aximize        _s_wap          _<up>_    ↑
_M-<down>_  ↓   _c_lose           _[_backward     _<right>_ >
_q_uit          _e_qualize        _]_forward     ^
^               ^               _K_ill         ^
^               ^                  ^             ^
"
   ;; Movement
   ("M-<left>" windmove-left)
   ("M-<down>" windmove-down)
   ("M-<up>" windmove-up)
   ("M-<right>" windmove-right)

   ;; Split/manage
   ("-" rc/split-window-vertically-and-switch)
   ("/" rc/split-window-horizontally-and-switch)
   ("c" evil-window-delete)
   ("d" evil-window-delete)
   ("m" delete-other-windows)
   ("e" balance-windows)

   ;; Switch
   ("b" counsel-switch-buffer)
   ("f" counsel-find-file)
   ("P" project-find-file)
   ("s" ace-swap-window)
   ("[" previous-buffer)
   ("]" next-buffer)
   ("K" kill-this-buffer)

   ;; Resize
   ("<left>" windresize-left)
   ("<right>" windresize-right)
   ("<down>" windresize-down)
   ("<up>" windresize-up)

   ("q" nil))



* Keybinds
** Preamble
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
         (general-define-key
          :states '(normal motion visual)
          :keymaps 'override
          :prefix "SPC"

          ;; Top level functions
          "/" '(rc/rg :which-key "ripgrep")
                      ":" '(project-find-file :which-key "Project File")
                      "." '(counsel-find-file :which-key "Find File")
                      "," '(counsel-recentf :which-key "Recent Files")
                      "TAB" '(switch-to-prev-buffer :which-key "previous buffer")
                      "SPC" '(counsel-M-x :which-key "M-x")
                      "q" '(save-buffers-kill-terminal :which-key "quit emacs")
                      "r" '(jump-to-register :which-key "registers")
                      "X" '(org-capture :which-key "Capture")

        ;; Buffers
        "b" '(nil :which-key "buffer")
        "bb" '(counsel-switch-buffer :which-key "switch buffer")
        "bd" '(evil-delete-buffer :which-key "delete buffer")
        "bm" '(rc/kill-other-buffers :which-key "kill other buffers")
        "bi" '(ibuffer :which-key "ibuffer")
        "br" '(revert-buffer :which-key "revert buffer")

    ;; Code

    "c" '(nil :which-key "code")
    "cd" '(lsp-find-defintion :which-key "Definition")
    "cR" '(lsp-find-references :which-key "References")
    "ca" '(lsp-execute-code-action :which-key "Code action")
    "ci" '(lsp-find-implementations :which-key "Implementations")
    "cD" '(lsp-find-type-definitions :which-key "Type Def.")
    "cc" '(lsp-treemacs-call-hierarchy :which-key "Call hierarchy")

    "cf" '(nil :which-key "format")
    "cfl" '(lsp-format-buffer :which-key "LSP format Buffer")
    "cfa" '(apheleia-format-buffer :which-key "Apheleia Format")
    "cfr" '(lsp-format-region :which-key "LSP Format Region")
    "cft" '(lsp-on-type-formatting :which-key "Toggle On Type Formatting")



      ;;Files.
        "f" '(nil :which-key "files")
          "fb" '(counsel-bookmark :which-key "bookmarks")
          "ff" '(counsel-find-file :which-key "find file")
          "fr" '(counsel-recentf :which-key "recent files")
          "fR" '(rename-file :which-key "rename file")
          "fs" '(save-buffer :which-key "save buffer")
          "fS" '(evil-write-all :which-key "save all buffers")

          ;; Hydras
          "H" '(nil :which-key "Hydras")
  "Hs" '(hydra-text-scale/body :which-key "Scale text")
  "Ht" '(rc-hydra-theme-switcher/body :which-key "themes")
          "Hf" '(rc-hydra-variable-fonts/body :which-key "mixed-pitch face")
          "Hw" '(rc-hydra-window/body :which-key "Window Control")
          "Hd" '(rc-dired/body :which-key "Dired")

        ;; Help/emacs
        "h" '(nil :which-key "help/emacs")

        "hv" '(helpful-variable :which-key "des. variable")
        "hb" '(counsel-descbinds :which-key "des. bindings")
        "hM" '(describe-mode :which-key "des. mode")
        "hf" '(helpful-function :which-key "des. func")
        "hF" '(counsel-describe-face :which-key "des. face")
        "hk" '(helpful-key :which-key "des. key")

        "hed" '((lambda () (interactive) (jump-to-register 67)) :which-key "edit dotfile")

        "hm" '(nil :which-key "switch mode")
        "hme" '(elisp-mode :which-key "elisp mode")
        "hmo" '(org-mode :which-key "org mode")
        "hmt" '(text-mode :which-key "text mode")

        "hp" '(nil :which-key "packages")
        "hpr" 'package-refresh-contents
        "hpi" 'package-install
        "hpd" 'package-delete
        ;; Windows
        "w" '(nil :which-key "window")
        "wm" '(jib/toggle-maximize-buffer :which-key "maximize buffer")
        "wN" '(make-frame :which-key "make frame")
        "wd" '(evil-window-delete :which-key "delete window")
        "w-" '(jib/split-window-vertically-and-switch :which-key "split below")
        "w/" '(jib/split-window-horizontally-and-switch :which-key "split right")
        "wr" '(rc-hydra-window/body :which-key "hydra window")
        "wl" '(evil-window-right :which-key "evil-window-right")
        "wh" '(evil-window-left :which-key "evil-window-left")
        "wj" '(evil-window-down :which-key "evil-window-down")
        "wk" '(evil-window-up :which-key "evil-window-up")
        "wz" '(text-scale-adjust :which-key "text zoom")

    ;; Toggles
    "t" '(nil :which-key "toggles")
    "tm" '(modus-themes-toggle :which-key "Modus Themes")
        ) ;; End SPC prefix block
#+end_src

#+RESULTS:
** 

** all mode keybinds
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (general-def
    :keymaps 'override

    ;; Emacs
    "M-x" 'counsel-M-x
    
  )

#+end_src

#+RESULTS:

** Non-insert mode bindings
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (general-def
    :states '(normal visual motion)
    "gc" 'comment-dwim
    "gC" 'comment-line
    "u" 'undo-only
  "U" 'undo-redo
    "j" 'evil-next-visual-line
    "k" 'evil-previous-visual-line
    "f" 'evil-avy-goto-char-in-line
    )

  (general-def
    :states '(normal visual motion)
    :keymaps 'override
    "s" 'swiper)

  (general-def
    :states '(insert)
    "C-a" 'evil-beginning-of-visual-line
    "C-e" 'evil-end-of-visual-line
    "C-S-a" 'evil-beginning-of-line
    "C-S-e" 'evil-end-of-line
    "C-n" 'evil-next-visual-line
    "C-p" 'evil-previous-visual-line
    "TAB" 'yas-expand 

    )
#+end_src

#+RESULTS:
* Languages
** Web mode
#+begin_src emacs-lisp :results none :tangle ~/.config/emacs/init.el
  (use-package web-mode
    :ensure t
    :defer t
    :init
    (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
    :config
    (setq web-mode-enable-current-element-highlight t
          web-mode-enable-current-column-highlight t)

    :general
    (general-def
      :prefix ","
      :states 'motion
      :keymaps 'web-mode-map
      "" nil
      "i" '(web-mode-buffer-indent :which-key "Web mode indent")
      "c" '(web-mode-fold-or-unfold :which-key "Web mode toggle fold")
      ))

#+end_src

** emacs-lisp-mode
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :results none
  (use-package emacs-lisp-mode
    :ensure nil
    :general
    (general-define-key
     :prefix ","
     :states 'motion
     :keymaps 'emacs-lisp-mode-map
     "" nil
     "e" '(nil :which-key "eval")
     "es" '(eval-last-sexp :which-key "eval-sexp")
     "er" '(eval-region :which-key "eval-region")
     "eb" '(eval-buffer :which-key "eval-buffer")

     "g" '(counsel-imenu :which-key "imenu")
     "c" '(check-parens :which-key "check parens")
     "I" '(indent-region :which-key "indent-region")

     "b" '(nil :which-key "org src")
     "bc" '(org-edit-src-abort :which-key "Abort")
     "bb" '(org-edit-src-exit :which-key "Save & Exit")
   


     )

  
  

    )
#+end_src

* Dashboard
#+begin_src emacs-lisp :tangle ~/.config/emacs/init.el :results none
  (use-package dashboard
  :ensure t
    :init      ;; tweak dashboard config before loading it
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "\nKEYBINDINGS:\
  \nFind file               (SPC .)     \
  Open buffer list    (SPC b i)\
  \nFind recent files       (SPC f r)   \
  \nOpen dired file manager (SPC d d)   \
  List of keybindings (SPC h b b)")
    (setq dashboard-startup-banner "~/.config/emacs/darktower.jpg")  ;; use custom image as banner
    (setq dashboard-center-content t) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 5)
                            (agenda . 5 )
                            (bookmarks . 5)
                            (projects . 5)
                            (registers . 5)))
    :config
    (dashboard-setup-startup-hook)
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book"))))
#+end_src
